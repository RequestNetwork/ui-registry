{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-widget",
  "type": "registry:component",
  "title": "Payment Widget",
  "description": "A wallet-connected payment widget for Request Network using pure wagmi",
  "dependencies": [
    "wagmi@^2.12.29",
    "viem@^2.21.53",
    "@tanstack/react-query@^5.64.1",
    "react-hook-form@^7.0.0",
    "lucide-react@^0.542.0",
    "html2pdf.js@^0.12.0"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "label",
    "radio-group"
  ],
  "files": [
    {
      "path": "registry/default/payment-widget/payment-widget.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ConnectionHandler } from \"./components/connection-handler\";\nimport { Web3Provider } from \"@/components/providers/web3-provider\";\nimport { PaymentModal } from \"./components/payment-modal\";\nimport type { PaymentWidgetProps } from \"./types\";\n\nfunction PaymentWidgetInner({\n  children,\n  amountInUsd,\n  walletAccount,\n  recipientWallet,\n  paymentConfig,\n  uiConfig,\n  invoiceInfo,\n  onSuccess,\n  onError,\n}: Omit<PaymentWidgetProps, \"paymentConfig\"> & {\n  paymentConfig: Omit<\n    PaymentWidgetProps[\"paymentConfig\"],\n    \"walletConnectProjectId\"\n  >;\n}) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const handleModalOpenChange = (open: boolean) => {\n    setIsModalOpen(open);\n  };\n\n  return (\n    <div className=\"inline-flex flex-col items-center\">\n      <Button\n        onClick={() => setIsModalOpen(true)}\n        variant=\"ghost\"\n        className=\"p-0 h-auto bg-transparent hover:bg-transparent\"\n      >\n        {children || \"Pay with crypto\"}\n      </Button>\n\n      <div className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground\">\n        {/** biome-ignore lint/performance/noImgElement: This is a ShadCN library, we can't enforce next syntax on everybody */}\n        <img\n          src=\"/assets/logo-sm.svg\"\n          alt=\"Request Network\"\n          width={10}\n          height={10}\n          className=\"flex-shrink-0\"\n        />\n        <span>Powered by Request Network</span>\n      </div>\n\n      {walletAccount !== undefined ? (\n        <PaymentModal\n          walletAccount={walletAccount}\n          isOpen={isModalOpen}\n          handleModalOpenChange={handleModalOpenChange}\n          amountInUsd={amountInUsd}\n          recipientWallet={recipientWallet}\n          paymentConfig={paymentConfig}\n          uiConfig={{\n            showInvoiceDownload: uiConfig?.showInvoiceDownload || true,\n            showRequestScanUrl: uiConfig?.showRequestScanUrl || true,\n          }}\n          invoiceInfo={invoiceInfo}\n          onSuccess={onSuccess}\n          onError={onError}\n        />\n      ) : (\n        <ConnectionHandler\n          isOpen={isModalOpen}\n          handleModalOpenChange={handleModalOpenChange}\n          paymentModal={\n            <PaymentModal\n              walletAccount={walletAccount}\n              isOpen={isModalOpen}\n              handleModalOpenChange={handleModalOpenChange}\n              amountInUsd={amountInUsd}\n              recipientWallet={recipientWallet}\n              paymentConfig={paymentConfig}\n              uiConfig={{\n                showInvoiceDownload: uiConfig?.showInvoiceDownload || true,\n                showRequestScanUrl: uiConfig?.showRequestScanUrl || true,\n              }}\n              invoiceInfo={invoiceInfo}\n              onSuccess={onSuccess}\n              onError={onError}\n            />\n          }\n        />\n      )}\n    </div>\n  );\n}\n\nexport function PaymentWidget({\n  amountInUsd,\n  recipientWallet,\n  paymentConfig,\n  invoiceInfo,\n  onSuccess,\n  onError,\n  uiConfig,\n  walletAccount,\n  children,\n}: PaymentWidgetProps) {\n  return (\n    <Web3Provider walletConnectProjectId={paymentConfig.walletConnectProjectId}>\n      <PaymentWidgetInner\n        amountInUsd={amountInUsd}\n        walletAccount={walletAccount}\n        recipientWallet={recipientWallet}\n        uiConfig={uiConfig}\n        paymentConfig={{\n          rnApiClientId: paymentConfig.rnApiClientId,\n          feeInfo: paymentConfig.feeInfo,\n          network: paymentConfig.network,\n          supportedCurrencies: paymentConfig.supportedCurrencies,\n        }}\n        invoiceInfo={invoiceInfo}\n        onSuccess={onSuccess}\n        onError={onError}\n      >\n        {children}\n      </PaymentWidgetInner>\n    </Web3Provider>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/payment-widget.tsx"
    },
    {
      "path": "registry/default/payment-widget/components/connection-handler.tsx",
      "content": "\"use client\";\n\nimport { useAccount } from \"wagmi\";\nimport { WalletConnectModal } from \"./wallet-connect-modal\";\nimport type { ReactNode } from \"react\";\n\ninterface ConnectionHandlerProps {\n  isOpen: boolean;\n  handleModalOpenChange: (open: boolean) => void;\n  paymentModal: ReactNode;\n}\n\nexport function ConnectionHandler({\n  isOpen,\n  handleModalOpenChange,\n  paymentModal,\n}: ConnectionHandlerProps) {\n  const { isConnected, isConnecting } = useAccount();\n\n  if (!isConnected) {\n    return (\n      <WalletConnectModal\n        isLoading={isConnecting}\n        isOpen={isOpen}\n        handleModalOpenChange={handleModalOpenChange}\n      />\n    );\n  }\n  return paymentModal;\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/components/connection-handler.tsx"
    },
    {
      "path": "registry/default/payment-widget/components/wallet-connect-modal.tsx",
      "content": "\"use client\";\n\nimport { useConnect } from \"wagmi\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface WalletConnectModalProps {\n  isOpen: boolean;\n  isLoading: boolean;\n  handleModalOpenChange: (open: boolean) => void;\n}\n\nexport function WalletConnectModal({\n  isOpen,\n  isLoading,\n  handleModalOpenChange,\n}: WalletConnectModalProps) {\n  const { connectors, connect, isPending } = useConnect();\n\n  const handleConnect = (connector: any) => {\n    connect({ connector });\n  };\n\n  const getWalletIcon = (connectorName: string) => {\n    const name = connectorName.toLowerCase();\n\n    switch (true) {\n      case name.includes(\"metamask\"):\n        return \"/assets/metamask.svg\";\n      case name.includes(\"walletconnect\"):\n        return \"/assets/wallet-connect.webp\";\n      case name.includes(\"coinbase\"):\n        return \"/assets/coinbase.webp\";\n      case name.includes(\"safe\"):\n        return \"/assets/safe.webp\";\n      default:\n        return \"/assets/wallet-icon.svg\";\n    }\n  };\n\n  // Filter out the generic injected connector, which needs to be in wagmi config otherwise types start breaking\n  const displayConnectors = connectors.filter(\n    (connector) => !connector.name.toLowerCase().includes(\"injected\"),\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleModalOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader className=\"text-center\">\n          <DialogTitle>Connect Wallet</DialogTitle>\n          <DialogDescription>\n            Choose a wallet to connect and make your payment\n          </DialogDescription>\n        </DialogHeader>\n        {isLoading ? (\n          <div className=\"text-center text-sm text-muted-foreground py-2\">\n            <Loader2 className=\"mx-auto mb-2 h-5 w-5 animate-spin\" />\n          </div>\n        ) : (\n          <div className=\"space-y-3 py-4\">\n            {displayConnectors.map((connector) => (\n              <Button\n                key={connector.uid}\n                onClick={() => handleConnect(connector)}\n                disabled={isPending}\n                variant=\"outline\"\n                className=\"w-full justify-start h-14\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  {/** biome-ignore lint/performance/noImgElement: This is a ShadCN library, we can't enforce next syntax on everybody */}\n                  <img\n                    src={getWalletIcon(connector.name)}\n                    alt={`${connector.name} icon`}\n                    width={32}\n                    height={32}\n                    className=\"flex-shrink-0 rounded-md\"\n                  />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">{connector.name}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Connect using {connector.name}\n                    </div>\n                  </div>\n                </div>\n              </Button>\n            ))}\n\n            {isPending && (\n              <div className=\"text-center text-sm text-muted-foreground py-2\">\n                Connecting to wallet...\n              </div>\n            )}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/components/wallet-connect-modal.tsx"
    },
    {
      "path": "registry/default/payment-widget/components/payment-modal.tsx",
      "content": "\"use client\";\n\nimport { useAccount } from \"wagmi\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useState } from \"react\";\nimport { CurrencySelect } from \"./currency-select\";\nimport { BuyerInfoForm } from \"./buyer-info-form\";\nimport { PaymentConfirmation } from \"./payment-confirmation\";\nimport { PaymentSuccess } from \"./payment-success\";\nimport type { BuyerInfo } from \"@/types\";\nimport type { PaymentWidgetProps } from \"../types\";\nimport { DisconnectWallet } from \"./disconnect-wallet\";\nimport type { ConversionCurrency } from \"@/lib/currencies\";\n\ninterface PaymentModalProps extends Omit<PaymentWidgetProps, \"paymentConfig\"> {\n  paymentConfig: Omit<\n    PaymentWidgetProps[\"paymentConfig\"],\n    \"walletConnectProjectId\"\n  >;\n  isOpen: boolean;\n  handleModalOpenChange: (open: boolean) => void;\n}\n\nexport function PaymentModal({\n  walletAccount,\n  isOpen,\n  handleModalOpenChange,\n  amountInUsd,\n  recipientWallet,\n  paymentConfig,\n  uiConfig,\n  invoiceInfo,\n  onSuccess,\n  onError,\n}: PaymentModalProps) {\n  const [activeStep, setActiveStep] = useState<\n    | \"currency-select\"\n    | \"buyer-info\"\n    | \"payment-confirmation\"\n    | \"payment-success\"\n  >(\"currency-select\");\n  const [selectedCurrency, setSelectedCurrency] =\n    useState<ConversionCurrency | null>(null);\n  const [buyerInfo, setBuyerInfo] = useState<BuyerInfo | undefined>(\n    invoiceInfo.buyerInfo || undefined,\n  );\n  const [requestId, setRequestId] = useState<string>(\"\");\n\n  const { address } = useAccount();\n\n  const handleCurrencySelect = (currency: ConversionCurrency) => {\n    setSelectedCurrency(currency);\n    setActiveStep(\"buyer-info\");\n  };\n\n  const handleBuyerInfoSubmit = (data: BuyerInfo) => {\n    setBuyerInfo(data);\n    setActiveStep(\"payment-confirmation\");\n  };\n\n  const handlePaymentSuccess = async (requestId: string) => {\n    setRequestId(requestId);\n    setActiveStep(\"payment-success\");\n    await onSuccess?.(requestId);\n  };\n\n  const isWalletOverride = walletAccount !== undefined;\n  const connectedWalletAddress = walletAccount\n    ? walletAccount.account?.address\n    : address;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleModalOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Payment</DialogTitle>\n          <DialogDescription>\n            Pay with crypto using Request Network\n          </DialogDescription>\n        </DialogHeader>\n\n        {activeStep !== \"payment-success\" && !isWalletOverride && (\n          <DisconnectWallet />\n        )}\n\n        {activeStep === \"currency-select\" && (\n          <CurrencySelect\n            onSubmit={handleCurrencySelect}\n            rnApiClientId={paymentConfig.rnApiClientId}\n            network={paymentConfig.network}\n            supportedCurrencies={paymentConfig.supportedCurrencies}\n          />\n        )}\n\n        {activeStep === \"buyer-info\" && (\n          <BuyerInfoForm\n            initialData={buyerInfo}\n            onBack={() => setActiveStep(\"currency-select\")}\n            onSubmit={handleBuyerInfoSubmit}\n          />\n        )}\n\n        {activeStep === \"payment-confirmation\" &&\n          connectedWalletAddress &&\n          selectedCurrency &&\n          buyerInfo && (\n            <PaymentConfirmation\n              amountInUsd={amountInUsd}\n              connectedWalletAddress={connectedWalletAddress}\n              walletAccount={walletAccount}\n              recipientWallet={recipientWallet}\n              handlePaymentSuccess={handlePaymentSuccess}\n              handlePaymentError={onError}\n              paymentCurrency={selectedCurrency}\n              feeInfo={paymentConfig.feeInfo}\n              rnApiClientId={paymentConfig.rnApiClientId}\n              onBack={() => setActiveStep(\"buyer-info\")}\n            />\n          )}\n\n        {activeStep === \"payment-success\" &&\n          selectedCurrency &&\n          buyerInfo &&\n          connectedWalletAddress && (\n            <PaymentSuccess\n              requestId={requestId}\n              amountInUsd={amountInUsd}\n              paymentCurrency={selectedCurrency.id}\n              invoiceInfo={invoiceInfo}\n              finalBuyerInfo={buyerInfo}\n              connectedWalletAddress={connectedWalletAddress}\n              shouldShowInvoiceDownload={uiConfig?.showInvoiceDownload || true}\n              shouldShowRequestScanUrl={uiConfig?.showRequestScanUrl || true}\n            />\n          )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/components/payment-modal.tsx"
    },
    {
      "path": "registry/default/payment-widget/components/currency-select.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  type ConversionCurrency,\n  getConversionCurrencies,\n  getSymbolOverride,\n} from \"@/lib/currencies\";\nimport { Check } from \"lucide-react\";\n\ninterface CurrencySelectProps {\n  supportedCurrencies?: string[];\n  rnApiClientId: string;\n  network: string;\n  onSubmit: (currency: ConversionCurrency) => void;\n}\n\nexport function CurrencySelect({\n  supportedCurrencies,\n  onSubmit,\n  network,\n  rnApiClientId,\n}: CurrencySelectProps) {\n  const [selectedCurrency, setSelectedCurrency] = useState<string | null>(null);\n  const {\n    data: conversionCurrencies,\n    isLoading,\n    isError,\n    refetch,\n  } = useQuery({\n    queryKey: [\"conversion-currencies\"],\n    queryFn: async () => getConversionCurrencies(rnApiClientId, network),\n  });\n\n  const handleSubmit = () => {\n    if (selectedCurrency === null) {\n      return;\n    }\n\n    const currency = conversionCurrencies?.find(\n      (c) => c.id === selectedCurrency,\n    );\n\n    if (!currency) {\n      return;\n    }\n\n    onSubmit(currency);\n  };\n\n  if (isLoading) {\n    return <div>Loading currencies...</div>;\n  }\n\n  if (isError) {\n    return (\n      <div className=\"flex flex-col items-center\">\n        <p className=\"text-red-500\">\n          Error loading currencies. Please try again later.\n        </p>\n        <Button onClick={() => refetch()}>Retry</Button>\n      </div>\n    );\n  }\n\n  if (!conversionCurrencies || conversionCurrencies.length === 0) {\n    return <div>No conversion currencies available.</div>;\n  }\n\n  const lowerCaseSupportedCurrencies = (supportedCurrencies || []).map(\n    (currency) => currency.toLowerCase(),\n  );\n\n  const eligibleCurrencies =\n    lowerCaseSupportedCurrencies.length > 0\n      ? conversionCurrencies.filter((currency) =>\n          lowerCaseSupportedCurrencies.includes(currency.symbol.toLowerCase()),\n        )\n      : conversionCurrencies;\n\n  if (eligibleCurrencies.length === 0) {\n    console.warn(\n      \"Your supportedCurrencies do not match available currencies.\",\n      { supportedCurrencies, conversionCurrencies },\n    );\n    return <div>No supported currencies available.</div>;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold\">Select a currency</h3>\n      <RadioGroup value={selectedCurrency} onValueChange={setSelectedCurrency}>\n        <div className=\"space-y-2 overflow-y-auto max-h-64\">\n          {eligibleCurrencies.map((currency) => {\n            const isSelected = selectedCurrency === currency.id;\n\n            return (\n              <div key={currency.id}>\n                <label\n                  htmlFor={currency.id}\n                  className={`flex items-center justify-between cursor-pointer w-full p-4 rounded-lg border-2 transition-colors ${\n                    isSelected\n                      ? \"bg-accent border-primary\"\n                      : \"bg-background border-border hover:bg-muted\"\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <RadioGroupItem\n                      value={currency.id}\n                      id={currency.id}\n                      className=\"sr-only\"\n                    />\n                    <div\n                      className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium ${\n                        isSelected\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"bg-muted text-muted-foreground\"\n                      }`}\n                    >\n                      {getSymbolOverride(currency.symbol)}\n                    </div>\n                    <div className=\"font-bold text-foreground\">\n                      {currency.name}\n                    </div>\n                  </div>\n                  {isSelected && <Check className=\"w-5 h-5 text-primary\" />}\n                </label>\n              </div>\n            );\n          })}\n        </div>\n      </RadioGroup>\n      <Button\n        onClick={handleSubmit}\n        disabled={!selectedCurrency}\n        className=\"w-full\"\n      >\n        Continue\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/components/currency-select.tsx"
    },
    {
      "path": "registry/default/payment-widget/components/buyer-info-form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport type { BuyerInfo } from \"@/types\";\n\ninterface BuyerInfoProps {\n  initialData?: BuyerInfo;\n  onBack: () => void;\n  onSubmit: (data: BuyerInfo) => void;\n}\n\nexport function BuyerInfoForm({\n  initialData,\n  onBack,\n  onSubmit,\n}: BuyerInfoProps) {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<BuyerInfo>({\n    defaultValues: initialData || {},\n  });\n\n  const onFormSubmit = (data: BuyerInfo) => {\n    onSubmit(data);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold\">Buyer Information</h3>\n      <form onSubmit={handleSubmit(onFormSubmit)} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">\n            Email <span className=\"text-red-500\">*</span>\n          </Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"john.doe@example.com\"\n            {...register(\"email\", {\n              required: \"Email is required\",\n              pattern: {\n                value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                message: \"Please enter a valid email address\",\n              },\n            })}\n          />\n          {errors.email && (\n            <span className=\"text-sm text-destructive\">\n              {errors.email.message}\n            </span>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"firstName\">First Name</Label>\n            <Input\n              id=\"firstName\"\n              placeholder=\"John\"\n              {...register(\"firstName\")}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"lastName\">Last Name</Label>\n            <Input id=\"lastName\" placeholder=\"Doe\" {...register(\"lastName\")} />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"businessName\">Business Name</Label>\n            <Input\n              id=\"businessName\"\n              placeholder=\"Acme Inc.\"\n              {...register(\"businessName\")}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"phone\">Phone</Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              placeholder=\"+1 (555) 123-4567\"\n              {...register(\"phone\")}\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"streetAddress\">Street Address</Label>\n          <Input\n            id=\"streetAddress\"\n            placeholder=\"123 Main St, Apt 4B\"\n            {...register(\"streetAddress\")}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"city\">City</Label>\n            <Input\n              id=\"city\"\n              placeholder=\"San Francisco\"\n              {...register(\"city\")}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"state\">State/Province</Label>\n            <Input id=\"state\" placeholder=\"CA\" {...register(\"state\")} />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"country\">Country</Label>\n            <Input\n              id=\"country\"\n              placeholder=\"United States\"\n              {...register(\"country\")}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"postalCode\">Postal Code</Label>\n            <Input\n              id=\"postalCode\"\n              placeholder=\"94105\"\n              {...register(\"postalCode\")}\n            />\n          </div>\n        </div>\n\n        <div className=\"flex space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onBack}\n            className=\"flex-1\"\n          >\n            Back\n          </Button>\n          <Button type=\"submit\" className=\"flex-1\">\n            Continue to Payment\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/components/buyer-info-form.tsx"
    },
    {
      "path": "registry/default/payment-widget/components/payment-confirmation.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\nimport type { FeeInfo, PaymentError } from \"@/types\";\nimport type { PaymentWidgetProps } from \"../types\";\nimport { usePayment } from \"@/hooks/use-payment\";\nimport { type ConversionCurrency, getSymbolOverride } from \"@/lib/currencies\";\n\ninterface PaymentConfirmationProps {\n  feeInfo: FeeInfo | undefined;\n  rnApiClientId: string;\n  amountInUsd: string;\n  connectedWalletAddress: string;\n  walletAccount?: PaymentWidgetProps[\"walletAccount\"];\n  recipientWallet: string;\n  paymentCurrency: ConversionCurrency;\n  onBack: () => void;\n  handlePaymentSuccess: (requestId: string) => void | Promise<void>;\n  handlePaymentError?: (error: PaymentError) => void | Promise<void>;\n}\n\nexport function PaymentConfirmation({\n  amountInUsd,\n  paymentCurrency,\n  rnApiClientId,\n  connectedWalletAddress,\n  recipientWallet,\n  feeInfo,\n  onBack,\n  handlePaymentSuccess,\n  handlePaymentError,\n}: PaymentConfirmationProps) {\n  const { isExecuting, executePayment } = usePayment();\n\n  const handleExecutePayment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const { requestId } = await executePayment(rnApiClientId, {\n        payerWallet: connectedWalletAddress,\n        amountInUsd,\n        recipientWallet,\n        paymentCurrency: paymentCurrency.id,\n        feeInfo,\n      });\n\n      await handlePaymentSuccess(requestId);\n    } catch (error) {\n      await handlePaymentError?.(error as PaymentError);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold\">Payment Confirmation</h3>\n\n      <div className=\"flex items-center justify-center space-x-6 p-6 bg-muted rounded-lg\">\n        <div className=\"flex flex-col items-center space-y-2\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold text-lg\">\n            {getSymbolOverride(paymentCurrency.symbol)}\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xs text-muted-foreground\">From</div>\n            <div className=\"text-sm font-medium text-foreground\">\n              {paymentCurrency.name}\n            </div>\n          </div>\n        </div>\n\n        <ArrowRight className=\"w-6 h-6 text-muted-foreground\" />\n\n        <div className=\"flex flex-col items-center space-y-2\">\n          <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold text-lg\">\n            USD\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xs text-muted-foreground\">To</div>\n            <div className=\"text-sm font-medium text-foreground\">\n              ${amountInUsd}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium\">Payment Destination</h4>\n        <div className=\"p-3 bg-muted rounded-lg\">\n          <span className=\"text-sm font-mono text-foreground\">\n            {recipientWallet}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"flex space-x-2\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onBack}\n          className=\"flex-1\"\n          disabled={isExecuting}\n        >\n          Back\n        </Button>\n        <Button\n          type=\"button\"\n          onClick={handleExecutePayment}\n          className=\"flex-1\"\n          disabled={isExecuting}\n        >\n          {isExecuting ? \"Processing...\" : \"Pay\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/components/payment-confirmation.tsx"
    },
    {
      "path": "registry/default/payment-widget/components/disconnect-wallet.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Wallet } from \"lucide-react\";\nimport { useAccount, useDisconnect } from \"wagmi\";\n\nexport function DisconnectWallet() {\n  const { address } = useAccount();\n  const { disconnect } = useDisconnect();\n\n  const handleDisconnect = () => {\n    disconnect();\n  };\n\n  return (\n    <div className=\"flex flex-row items-center my-2\">\n      <Wallet className=\"text-primary mr-2\" size={32} />\n      <span className=\"text-sm font-mono text-muted-foreground\">\n        {`${address?.slice(0, 6)}...${address?.slice(-4)}`}\n      </span>\n      <Button\n        variant=\"outline\"\n        onClick={handleDisconnect}\n        className=\"text-sm ml-auto\"\n      >\n        Disconnect\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/components/disconnect-wallet.tsx"
    },
    {
      "path": "registry/default/payment-widget/components/payment-success.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, ExternalLink, Download } from \"lucide-react\";\nimport { createInvoice, type CreateInvoiceParams } from \"@/lib/invoice\";\nimport { useRef } from \"react\";\nimport { InvoicePDFTemplate } from \"@/components/invoice/invoice-template\";\nimport type { BuyerInfo, InvoiceInfo } from \"@/types\";\n\ninterface PaymentSuccessProps {\n  requestId: string;\n  amountInUsd: string;\n  paymentCurrency: string;\n  invoiceInfo: InvoiceInfo;\n  finalBuyerInfo: BuyerInfo;\n  connectedWalletAddress: string;\n  shouldShowRequestScanUrl: boolean;\n  shouldShowInvoiceDownload: boolean;\n}\n\nexport function PaymentSuccess({\n  requestId,\n  amountInUsd,\n  paymentCurrency,\n  invoiceInfo,\n  finalBuyerInfo,\n  connectedWalletAddress,\n  shouldShowRequestScanUrl,\n  shouldShowInvoiceDownload,\n}: PaymentSuccessProps) {\n  const invoiceRef = useRef<HTMLDivElement>(null);\n\n  const invoiceParams: CreateInvoiceParams = {\n    company: invoiceInfo.companyInfo,\n    buyer: {\n      ...finalBuyerInfo,\n      walletAddress: connectedWalletAddress,\n    },\n    payment: {\n      chain: \"ethereum\",\n      currency: paymentCurrency,\n      exchangeRate: 1,\n      transactionHash: \"\",\n    },\n    items: invoiceInfo.items,\n    totals: invoiceInfo.totals,\n    metadata: {\n      ...(invoiceInfo.invoiceNumber && {\n        invoiceNumber: invoiceInfo.invoiceNumber,\n      }),\n      notes: `Payment processed through Request Network for ${amountInUsd} USD`,\n    },\n  };\n\n  const handleDownloadInvoice = async () => {\n    try {\n      const element = invoiceRef.current;\n      if (!element) {\n        console.error(\"Invoice element not found\");\n        return;\n      }\n\n      const html2pdf = (await import(\"html2pdf.js\")).default;\n\n      html2pdf()\n        .set({\n          margin: 1,\n          filename: `invoice-${invoiceParams.metadata?.invoiceNumber || \"payment\"}.pdf`,\n          image: { type: \"jpeg\", quality: 0.98 },\n          html2canvas: { scale: 2 },\n          jsPDF: { unit: \"in\", format: \"a4\", orientation: \"portrait\" },\n        })\n        .from(element)\n        .save();\n    } catch (error) {\n      console.error(\"Failed to download invoice:\", error);\n      alert(\"Failed to download invoice. Please try again.\");\n    }\n  };\n\n  const requestScanUrl = `https://scan.request.network/request/${requestId}`;\n\n  return (\n    <div className=\"flex flex-col items-center space-y-6 p-6\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <CheckCircle className=\"w-16 h-16 text-green-500\" />\n        <div className=\"text-center\">\n          <h3 className=\"text-xl font-semibold text-green-600\">\n            Payment Completed!\n          </h3>\n          <p className=\"text-gray-600 mt-2\">\n            Your payment of ${amountInUsd} has been processed successfully.\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col space-y-3 w-full\">\n        {shouldShowInvoiceDownload && (\n          <>\n            <Button onClick={handleDownloadInvoice} className=\"w-full\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download Invoice PDF\n            </Button>\n            <div\n              style={{\n                height: 0,\n                width: 0,\n                overflow: \"hidden\",\n                opacity: 0,\n                pointerEvents: \"none\",\n              }}\n            >\n              <div ref={invoiceRef}>\n                <InvoicePDFTemplate invoice={createInvoice(invoiceParams)} />\n              </div>\n            </div>\n          </>\n        )}\n        {shouldShowRequestScanUrl && (\n          <Button variant=\"outline\" asChild className=\"w-full\">\n            <a\n              href={requestScanUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"inline-flex items-center justify-center\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              View on Request Scan\n            </a>\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/payment-widget/components/payment-success.tsx"
    },
    {
      "path": "registry/default/payment-widget/types.ts",
      "content": "import type { FeeInfo, PaymentError, InvoiceInfo } from \"@/types\";\nimport type { PropsWithChildren } from \"react\";\nimport type { WalletClient } from \"viem\";\n\nexport interface PaymentConfig {\n  walletConnectProjectId?: string;\n  network: \"arbitrum\" | \"base\" | \"mainnet\" | \"optimism\" | \"polygon\" | \"sepolia\";\n  rnApiClientId: string;\n  feeInfo?: FeeInfo;\n  supportedCurrencies?: string[]; // an array of ticker symbols, e.g. ['ETH', 'USDC', 'DAI']\n}\n\nexport interface UiConfig {\n  showRequestScanUrl?: boolean;\n  showInvoiceDownload?: boolean;\n}\n\n/*\nStill TODO:\n9. Deploy to shad properly\n10. Restyle invoice template\n*/\n\nexport interface PaymentWidgetProps extends PropsWithChildren {\n  // The amount to be paid in USD\n  amountInUsd: string;\n  // The recipient wallet address for the payment\n  recipientWallet: string;\n  // Override for the buyer's wallet account if you already have an active session\n  walletAccount?: WalletClient;\n  // Configuration for the payment widget\n  paymentConfig: PaymentConfig;\n  // UI specific config\n  uiConfig?: UiConfig;\n  // Invoice information\n  invoiceInfo: InvoiceInfo;\n  // On success callback when the payment is completed\n  onSuccess?: (requestId: string) => void | Promise<void>;\n  // On error callback when the payment fails\n  onError?: (error: PaymentError) => void | Promise<void>;\n}\n",
      "type": "registry:lib",
      "target": "components/payment-widget/types.ts"
    },
    {
      "path": "registry/default/payment-widget/constants.ts",
      "content": "export const RN_API_URL = \"http://localhost:8080\";\n",
      "type": "registry:lib",
      "target": "components/payment-widget/constants.ts"
    },
    {
      "path": "components/providers/web3-provider.tsx",
      "content": "\"use client\";\n\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { WagmiProvider } from \"wagmi\";\nimport { getWagmiConfig } from \"@/lib/wagmi\";\nimport { useMemo, useRef } from \"react\";\n\nconst queryClient = new QueryClient();\n\nexport function Web3Provider({\n  children,\n  walletConnectProjectId,\n}: {\n  children: React.ReactNode;\n  walletConnectProjectId?: string;\n}) {\n  // @NOTE this may seem weird, but walletConnect doesn't handle strict mode initializing it twice, so we explicitly use a ref to store the config\n  const configRef = useRef<ReturnType<typeof getWagmiConfig> | null>(null);\n\n  const wagmiConfig = useMemo(() => {\n    if (!configRef.current) {\n      configRef.current = getWagmiConfig(walletConnectProjectId);\n    }\n    return configRef.current;\n  }, [walletConnectProjectId]);\n\n  return (\n    <WagmiProvider config={wagmiConfig}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/providers/web3-provider.tsx"
    },
    {
      "path": "components/invoice/invoice-template.tsx",
      "content": "import type { FC } from \"react\";\nimport {\n  formatCryptoAmount,\n  formatUSDAmount,\n  formatInvoiceDate,\n  type InvoiceData,\n} from \"@/lib/invoice\";\nimport \"./styles.css\";\n\nexport const InvoicePDFTemplate: FC<{ invoice: InvoiceData }> = ({\n  invoice,\n}) => {\n  return (\n    <div className=\"invoice-container\">\n      <div className=\"invoice-header\">\n        <div className=\"company-info\">\n          <h1 className=\"company-name\">{invoice.company.name}</h1>\n          <div className=\"company-wallet\">{invoice.company.walletAddress}</div>\n          <div className=\"company-address\">\n            <div>{invoice.company.address.street}</div>\n            <div>\n              {invoice.company.address.city}, {invoice.company.address.state}{\" \"}\n              {invoice.company.address.zipCode}\n            </div>\n            <div>Tax ID: {invoice.company.taxId}</div>\n            {invoice.company.email && <div>{invoice.company.email}</div>}\n          </div>\n        </div>\n\n        <div className=\"invoice-title-section\">\n          <h2 className=\"invoice-title\">INVOICE</h2>\n          <div className=\"invoice-number\">\n            #{invoice.metadata.invoiceNumber}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"invoice-meta\">\n        <div className=\"invoice-details\">\n          <div>\n            <span className=\"label\">Issue Date:</span>{\" \"}\n            {formatInvoiceDate(invoice.metadata.issueDate)}\n          </div>\n          <div>\n            <span className=\"label\">Chain:</span> {invoice.payment.chain}\n          </div>\n          <div>\n            <span className=\"label\">Currency:</span> {invoice.payment.currency}\n          </div>\n          {invoice.payment.transactionHash && (\n            <div className=\"transaction-hash\">\n              <span className=\"label\">TX:</span>{\" \"}\n              {invoice.payment.transactionHash}\n            </div>\n          )}\n        </div>\n\n        <div className=\"bill-to-section\">\n          <h3 className=\"bill-to-header\">BILL TO</h3>\n          <div className=\"customer-name\">\n            {[invoice.buyer.firstName, invoice.buyer.lastName]\n              .filter(Boolean)\n              .join(\" \") || \"Customer\"}\n          </div>\n          <div className=\"customer-wallet\">{invoice.buyer.walletAddress}</div>\n          <div className=\"customer-email\">{invoice.buyer.email}</div>\n          <div className=\"customer-address\">\n            <div>{invoice.buyer.streetAddress}</div>\n            <div>\n              {invoice.buyer.city}, {invoice.buyer.state}{\" \"}\n              {invoice.buyer.postalCode}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <table className=\"items-table\">\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th className=\"center col-qty\">Qty</th>\n            <th className=\"right col-price\">Unit Price</th>\n            <th className=\"center col-discount\">Disc%</th>\n            <th className=\"center col-tax\">Tax%</th>\n            <th className=\"right col-amount\">Total</th>\n          </tr>\n        </thead>\n        <tbody>\n          {invoice.items.map((item, index) => (\n            <tr\n              key={item.id}\n              className={index % 2 === 0 ? \"row-even\" : \"row-odd\"}\n            >\n              <td>{item.description}</td>\n              <td className=\"center\">{item.quantity}</td>\n              <td className=\"right price-amount\">\n                {formatCryptoAmount(\n                  item.unitPrice,\n                  item.currency || invoice.payment.currency,\n                )}\n              </td>\n              <td className=\"center\">{item.discount || 0}%</td>\n              <td className=\"center\">{item.tax || 0}%</td>\n              <td className=\"right price-amount bold\">\n                {formatCryptoAmount(\n                  item.total,\n                  item.currency || invoice.payment.currency,\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div className=\"totals-section\">\n        <div className=\"totals-box\">\n          {invoice.totals.totalDiscount > 0 && (\n            <div className=\"total-line discount\">\n              <span>Discount:</span>\n              <span className=\"total-amount\">\n                -\n                {formatCryptoAmount(\n                  invoice.totals.totalDiscount,\n                  invoice.payment.currency,\n                )}\n              </span>\n            </div>\n          )}\n\n          {invoice.totals.totalTax > 0 && (\n            <div className=\"total-line\">\n              <span>Tax:</span>\n              <span className=\"total-amount\">\n                {formatCryptoAmount(\n                  invoice.totals.totalTax,\n                  invoice.payment.currency,\n                )}\n              </span>\n            </div>\n          )}\n\n          <div className=\"total-line final\">\n            <span>TOTAL:</span>\n            <span className=\"total-amount large\">\n              {formatCryptoAmount(\n                invoice.totals.total,\n                invoice.payment.currency,\n              )}\n            </span>\n          </div>\n\n          <div className=\"total-line usd\">\n            <span>USD Equivalent:</span>\n            <span>{formatUSDAmount(invoice.totals.totalUSD)}</span>\n          </div>\n        </div>\n      </div>\n\n      {invoice.metadata.notes && (\n        <div className=\"notes-section\">\n          <h4 className=\"notes-header\">Notes:</h4>\n          <div className=\"notes-content\">{invoice.metadata.notes}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/invoice/invoice-template.tsx"
    },
    {
      "path": "components/invoice/styles.css",
      "content": ".invoice-container {\n  background-color: #ffffff;\n  padding: 32px;\n  max-width: 896px;\n  margin: 0 auto;\n  font-family: Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.6;\n  color: #000502;\n}\n\n.invoice-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 32px;\n}\n\n.company-info {\n  flex: 1;\n  padding-right: 32px;\n}\n\n.company-name {\n  font-size: 30px;\n  font-weight: 700;\n  color: #00b591;\n  margin-bottom: 16px;\n}\n\n.company-wallet {\n  font-size: 12px;\n  color: #5e6561;\n  font-family: \"Courier New\", monospace;\n  margin-bottom: 8px;\n}\n\n.company-address > div {\n  margin-bottom: 4px;\n}\n\n.invoice-title-section {\n  text-align: right;\n}\n\n.invoice-title {\n  font-size: 36px;\n  font-weight: 700;\n  color: #00b591;\n  margin-bottom: 8px;\n}\n\n.invoice-number {\n  font-size: 20px;\n  font-weight: 700;\n  color: #00b591;\n}\n\n.invoice-meta {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 32px;\n}\n\n.invoice-details > div {\n  margin-bottom: 8px;\n}\n\n.invoice-details .label {\n  font-weight: 600;\n}\n\n.transaction-hash {\n  font-size: 12px;\n  color: #5e6561;\n}\n\n.bill-to-section {\n  background-color: #f4f5f5;\n  padding: 16px;\n  border-radius: 8px;\n  min-width: 288px;\n}\n\n.bill-to-header {\n  font-weight: 600;\n  color: #374151;\n  margin-bottom: 12px;\n}\n\n.customer-name {\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 8px;\n}\n\n.customer-wallet {\n  font-size: 12px;\n  color: #5e6561;\n  font-family: \"Courier New\", monospace;\n  margin-bottom: 8px;\n}\n\n.customer-email {\n  margin-bottom: 8px;\n}\n\n.customer-address {\n  font-size: 14px;\n}\n\n.customer-address > div {\n  margin-bottom: 4px;\n}\n\n.items-table {\n  width: 100%;\n  border-collapse: collapse;\n  border: 1px solid #dbdfdd;\n  margin-bottom: 32px;\n}\n\n.items-table th {\n  background-color: #ecefed;\n  border: 1px solid #dbdfdd;\n  padding: 12px;\n  font-weight: 600;\n  text-align: left;\n}\n\n.items-table th.center {\n  text-align: center;\n}\n.items-table th.right {\n  text-align: right;\n}\n\n.items-table td {\n  border: 1px solid #dbdfdd;\n  padding: 12px;\n}\n\n.items-table td.center {\n  text-align: center;\n}\n.items-table td.right {\n  text-align: right;\n}\n\n.items-table .row-even {\n  background-color: #ffffff;\n}\n\n.items-table .row-odd {\n  background-color: #f4f5f5;\n}\n\n.price-amount {\n  font-family: \"Courier New\", monospace;\n  font-size: 12px;\n}\n\n.price-amount.bold {\n  font-weight: 600;\n}\n\n.col-qty {\n  width: 64px;\n}\n.col-price {\n  width: 128px;\n}\n.col-discount {\n  width: 64px;\n}\n.col-tax {\n  width: 64px;\n}\n.col-amount {\n  width: 128px;\n}\n\n.totals-section {\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 32px;\n}\n\n.totals-box {\n  background-color: #f4f5f5;\n  padding: 24px;\n  border-radius: 8px;\n  min-width: 320px;\n}\n\n.total-line {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n}\n\n.total-line.discount {\n  color: #00b591;\n}\n\n.total-line.final {\n  font-size: 18px;\n  font-weight: 700;\n  color: #00b591;\n  padding-top: 12px;\n  border-top: 1px solid #dbdfdd;\n}\n\n.total-line.usd {\n  font-size: 14px;\n  color: #5e6561;\n}\n\n.total-amount {\n  font-family: \"Courier New\", monospace;\n  font-size: 14px;\n}\n\n.total-amount.large {\n  font-size: inherit;\n}\n\n.notes-section {\n  border-top: 1px solid #dbdfdd;\n  padding-top: 16px;\n}\n\n.notes-header {\n  font-weight: 600;\n  color: #374151;\n  margin-bottom: 8px;\n}\n\n.notes-content {\n  font-size: 14px;\n  color: #5e6561;\n  background-color: #f4f5f5;\n  padding: 12px;\n  border-radius: 6px;\n}\n",
      "type": "registry:component",
      "target": "components/invoice/styles.css"
    },
    {
      "path": "lib/wagmi.ts",
      "content": "import { createConfig, http } from \"wagmi\";\nimport {\n  arbitrum,\n  base,\n  mainnet,\n  optimism,\n  polygon,\n  sepolia,\n} from \"wagmi/chains\";\nimport {\n  injected,\n  coinbaseWallet,\n  metaMask,\n  safe,\n  walletConnect,\n} from \"wagmi/connectors\";\n\nexport const getWagmiConfig = (walletConnectProjectId?: string) => {\n  const connectors = [\n    injected(),\n    coinbaseWallet({\n      appName: \"Request Network Payment\",\n    }),\n    metaMask(),\n    safe(),\n  ];\n\n  if (walletConnectProjectId && walletConnectProjectId.length > 0) {\n    try {\n      const connector = walletConnect({\n        projectId: walletConnectProjectId,\n        metadata: {\n          name: \"Request Network Payment\",\n          description: \"Pay with cryptocurrency using Request Network\",\n          url: \"https://request.network\",\n          icons: [\"https://request.network/favicon.ico\"],\n        },\n        showQrModal: true,\n      });\n\n      connectors.push(connector as any);\n    } catch (error) {\n      console.error(\"WalletConnect creation failed:\", error);\n    }\n  }\n\n  const config = createConfig({\n    chains: [mainnet, sepolia, arbitrum, optimism, polygon, base],\n    connectors,\n    transports: {\n      [mainnet.id]: http(),\n      [sepolia.id]: http(),\n      [arbitrum.id]: http(),\n      [optimism.id]: http(),\n      [polygon.id]: http(),\n      [base.id]: http(),\n    },\n  });\n\n  return config;\n};\n",
      "type": "registry:lib",
      "target": "lib/wagmi.ts"
    },
    {
      "path": "lib/payment.ts",
      "content": "import type { FeeInfo, PaymentError } from \"@/types\";\nimport { RN_API_URL } from \"@/registry/default/payment-widget/constants\";\n\nexport interface PaymentParams {\n  amountInUsd: string;\n  payerWallet: string;\n  recipientWallet: string;\n  paymentCurrency: string;\n  feeInfo?: FeeInfo;\n}\n\ninterface PayoutAPITransaction {\n  to: string;\n  data: string;\n  value: number | string | { type: string; hex: string };\n}\nexport interface PayoutAPIResponse {\n  requestId: string;\n  paymentReference: string;\n  transactions: PayoutAPITransaction[];\n  metadata: {\n    stepsRequired: number;\n    needsApproval: boolean;\n    approvalTransactionIndex: number;\n    paymentTransactionIndex: number;\n  };\n}\n\nexport type TxParams = {\n  to: `0x${string}`;\n  data: `0x${string}`;\n  value: bigint;\n};\n\nexport type SendTransactionFunction = (tx: TxParams) => Promise<void>;\n\nexport const isPaymentError = (error: any): error is PaymentError => {\n  return (\n    error && typeof error === \"object\" && \"type\" in error && \"error\" in error\n  );\n};\n\nexport const normalizeValue = (\n  value: PayoutAPITransaction[\"value\"],\n): bigint => {\n  // ERC20 tokens don't have a bignumber returned\n  if (typeof value === \"number\") {\n    return BigInt(value);\n  }\n\n  if (typeof value === \"string\") {\n    return BigInt(value);\n  }\n\n  if (typeof value === \"object\" && value !== null && \"hex\" in value) {\n    return BigInt(value.hex);\n  }\n\n  // Fallback to 0 if we can't parse it\n  console.warn(\"Unknown value format, defaulting to 0:\", value);\n  return BigInt(0);\n};\n\nexport const executeTransactions = async (\n  transactions: PayoutAPITransaction[],\n  sendTransaction: SendTransactionFunction,\n): Promise<void> => {\n  try {\n    for (const tx of transactions) {\n      await sendTransaction({\n        to: tx.to as `0x${string}`,\n        data: tx.data as `0x${string}`,\n        value: normalizeValue(tx.value),\n      });\n    }\n  } catch (error) {\n    console.error(\"Transaction execution failed:\", error);\n    throw { type: \"transaction\", error: error as Error } as PaymentError;\n  }\n};\n\nexport const createPayout = async (\n  rnApiClientId: string,\n  params: PaymentParams,\n): Promise<Response> => {\n  const {\n    amountInUsd,\n    payerWallet,\n    recipientWallet,\n    paymentCurrency,\n    feeInfo,\n  } = params;\n\n  const response = await fetch(`${RN_API_URL}/v2/payouts`, {\n    method: \"POST\",\n    headers: {\n      \"x-client-id\": rnApiClientId,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      amount: amountInUsd,\n      payerWallet: payerWallet,\n      payee: recipientWallet,\n      invoiceCurrency: \"USD\",\n      paymentCurrency: paymentCurrency,\n      feePercentage: feeInfo?.feePercentage || undefined,\n      feeAddress: feeInfo?.feeAddress || undefined,\n    }),\n  });\n\n  return response;\n};\n\nexport interface PaymentResponse {\n  requestId: string;\n}\n\nexport const executePayment = async ({\n  paymentParams,\n  rnApiClientId,\n  sendTransaction,\n}: {\n  rnApiClientId: string;\n  paymentParams: PaymentParams;\n  sendTransaction: SendTransactionFunction;\n}): Promise<PaymentResponse> => {\n  try {\n    const response = await createPayout(rnApiClientId, paymentParams);\n\n    if (!response.ok) {\n      let errorMessage = \"Failed to create payment\";\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch (_parsingError) {\n        // If we can't parse the error response, just use status text\n        errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n      }\n\n      const error = new Error(errorMessage);\n      throw { type: \"api\", error } as PaymentError;\n    }\n\n    const data: PayoutAPIResponse = await response.json();\n\n    if (data?.transactions) {\n      await executeTransactions(data.transactions, sendTransaction);\n\n      return { requestId: data.requestId };\n    } else {\n      const error = new Error(\"No transaction data received from backend\");\n      throw { type: \"api\", error } as PaymentError;\n    }\n  } catch (error) {\n    console.error(\"Error in payment flow:\", error);\n    if (isPaymentError(error)) {\n      throw error;\n    } else {\n      throw { type: \"unknown\", error: error as Error } as PaymentError;\n    }\n  }\n};\n",
      "type": "registry:lib",
      "target": "lib/payment.ts"
    },
    {
      "path": "lib/currencies.ts",
      "content": "import { RN_API_URL } from \"@/registry/default/payment-widget/constants\";\n\nexport type ConversionCurrency = {\n  id: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n  name: string;\n  type: \"ERC20\" | \"ETH\" | \"ISO4217\";\n  network: string;\n};\n\nexport interface GetConversionCurrenciesResponse {\n  currencyId: string;\n  network: string;\n  conversionRoutes: ConversionCurrency[];\n}\n\nconst DEFAULT_CURRENCY = \"USD\";\n\nexport const getConversionCurrencies = async (\n  rnApiClientId: string,\n  network: string,\n): Promise<ConversionCurrency[]> => {\n  const response = await fetch(\n    `${RN_API_URL}/v2/currencies/${DEFAULT_CURRENCY}/conversion-routes?network=${network}`,\n    {\n      headers: {\n        \"x-client-id\": rnApiClientId,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n\n  const data: GetConversionCurrenciesResponse = await response.json();\n\n  return data.conversionRoutes;\n};\n\nexport const getSymbolOverride = (symbol: string) => {\n  switch (symbol.toLowerCase()) {\n    case \"eth-sepolia\":\n      return \"ETH\";\n    default:\n      return symbol;\n  }\n};\n",
      "type": "registry:lib",
      "target": "lib/currencies.ts"
    },
    {
      "path": "lib/invoice.ts",
      "content": "import type { BuyerInfo, CompanyInfo, InvoiceItem } from \"@/types\";\n\nexport interface PaymentInfo {\n  chain: string;\n  currency: string;\n  exchangeRate: number;\n  transactionHash?: string;\n}\n\nexport interface InvoiceMetadata {\n  invoiceNumber: string;\n  issueDate: Date;\n  notes?: string;\n}\n\ninterface InvoiceBuyerInfo extends BuyerInfo {\n  walletAddress: string;\n}\n\nexport interface InvoiceData {\n  company: CompanyInfo;\n  buyer: InvoiceBuyerInfo;\n  payment: PaymentInfo;\n  items: InvoiceItem[];\n  metadata: InvoiceMetadata;\n  totals: {\n    totalDiscount: number;\n    totalTax: number;\n    total: number;\n    totalUSD: number;\n  };\n}\n\nexport const generateInvoiceNumber = (prefix: string = \"INV\"): string => {\n  const timestamp = Date.now();\n  const random = Math.floor(Math.random() * 1000)\n    .toString()\n    .padStart(3, \"0\");\n  return `${prefix}-${timestamp}-${random}`;\n};\n\nexport const formatUSDAmount = (amount: number): string => {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n};\n\nexport const formatCryptoAmount = (\n  amount: number,\n  currency: string,\n): string => {\n  return `${amount} ${currency}`;\n};\n\nexport const formatInvoiceDate = (date: Date): string => {\n  return date.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n};\n\nexport interface CreateInvoiceParams {\n  company: CompanyInfo;\n  buyer: InvoiceBuyerInfo;\n  payment: PaymentInfo;\n  items: InvoiceItem[];\n  totals: {\n    totalDiscount: number;\n    totalTax: number;\n    total: number;\n    totalUSD: number;\n  };\n  metadata?: Partial<InvoiceMetadata>;\n}\n\nexport const createInvoice = (params: CreateInvoiceParams): InvoiceData => {\n  const metadata: InvoiceMetadata = {\n    invoiceNumber: generateInvoiceNumber(),\n    issueDate: new Date(),\n    ...params.metadata,\n  };\n\n  const invoice: InvoiceData = {\n    metadata,\n    company: params.company,\n    buyer: params.buyer,\n    payment: params.payment,\n    items: params.items,\n    totals: params.totals,\n  };\n\n  return invoice;\n};\n\nexport const InvoiceUtils = {\n  createInvoice,\n  generateInvoiceNumber,\n  formatUSDAmount,\n  formatCryptoAmount,\n  formatInvoiceDate,\n} as const;\n",
      "type": "registry:lib",
      "target": "lib/invoice.ts"
    },
    {
      "path": "hooks/use-payment.ts",
      "content": "import { useState } from \"react\";\nimport { useAccount, useSendTransaction } from \"wagmi\";\nimport {\n  executePayment,\n  type PaymentParams,\n  type TxParams,\n  type PaymentResponse,\n} from \"@/lib/payment\";\nimport type { PaymentError } from \"@/types\";\nimport type { Account, WalletClient } from \"viem\";\n\nexport const usePayment = (walletAccount?: WalletClient) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const { isConnected: wagmiConnected, address: wagmiAddress } = useAccount();\n  const { sendTransactionAsync } = useSendTransaction();\n\n  const isConnected = walletAccount\n    ? Boolean(walletAccount.account)\n    : wagmiConnected;\n  const address = walletAccount ? walletAccount.account?.address : wagmiAddress;\n\n  const wrappedSendTransaction =\n    walletAccount?.account !== undefined\n      ? async (transaction: TxParams) => {\n          await walletAccount.sendTransaction({\n            account: walletAccount.account as Account, // we know it's defined here\n            chain: walletAccount.chain,\n            to: transaction.to,\n            data: transaction.data,\n            value: transaction.value,\n          });\n        }\n      : async (tx: TxParams) => {\n          await sendTransactionAsync(tx);\n        };\n\n  const execute = async (\n    rnApiClientId: string,\n    params: PaymentParams,\n  ): Promise<PaymentResponse> => {\n    if (!isConnected || !address) {\n      throw {\n        type: \"wallet\",\n        error: new Error(\"Wallet not connected\"),\n      } as PaymentError;\n    }\n\n    setIsExecuting(true);\n    try {\n      return await executePayment({\n        rnApiClientId,\n        paymentParams: {\n          amountInUsd: params.amountInUsd,\n          payerWallet: address,\n          recipientWallet: params.recipientWallet,\n          paymentCurrency: params.paymentCurrency,\n          feeInfo: params.feeInfo,\n        },\n        sendTransaction: wrappedSendTransaction,\n      });\n    } finally {\n      setIsExecuting(false);\n    }\n  };\n\n  return {\n    isExecuting,\n    executePayment: execute,\n    isConnected,\n    address,\n  };\n};\n",
      "type": "registry:lib",
      "target": "hooks/use-payment.ts"
    },
    {
      "path": "types/index.ts",
      "content": "export interface FeeInfo {\n  feePercentage: number;\n  feeAddress: string;\n}\n\nexport interface PaymentError {\n  type: \"wallet\" | \"transaction\" | \"api\" | \"unknown\";\n  error: Error;\n}\n\nexport interface Transaction {\n  to: string;\n  data: string;\n  value: { hex: string };\n}\n\nexport interface InvoiceItem {\n  id: string;\n  description: string;\n  quantity: number;\n  unitPrice: number;\n  discount?: number;\n  tax?: number;\n  total: number;\n  currency?: string;\n}\n\nexport interface CompanyInfo {\n  name: string;\n  walletAddress: string;\n  address: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country?: string;\n  };\n  taxId: string;\n  email?: string;\n  phone?: string;\n  website?: string;\n}\n\nexport interface BuyerInfo {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  businessName?: string;\n  phone?: string;\n  streetAddress?: string;\n  city?: string;\n  state?: string;\n  country?: string;\n  postalCode?: string;\n}\n\nexport interface InvoiceTotals {\n  totalDiscount: number;\n  totalTax: number;\n  total: number;\n  totalUSD: number;\n}\n\nexport interface InvoiceInfo {\n  buyerInfo?: BuyerInfo;\n  companyInfo: CompanyInfo;\n  items: InvoiceItem[];\n  totals: InvoiceTotals;\n  invoiceNumber?: string;\n}\n",
      "type": "registry:lib",
      "target": "types/index.ts"
    }
  ]
}